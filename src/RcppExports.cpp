// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello
List rcpp_hello();
RcppExport SEXP _segmentr_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
// segment_base
std::vector<int> segment_base(NumericMatrix x, Function loglikfun);
RcppExport SEXP _segmentr_segment_base(SEXP xSEXP, SEXP loglikfunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type loglikfun(loglikfunSEXP);
    rcpp_result_gen = Rcpp::wrap(segment_base(x, loglikfun));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_segmentr_rcpp_hello", (DL_FUNC) &_segmentr_rcpp_hello, 0},
    {"_segmentr_segment_base", (DL_FUNC) &_segmentr_segment_base, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_segmentr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
