% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hieralg.R
\name{hieralg}
\alias{hieralg}
\title{Segment data into changepoints assuming hierarchical structure}
\usage{
hieralg(data, log_likelihood = multivariate, penalty = function(x) 0,
  max_segments = ncol(data), allow_parallel = TRUE)
}
\arguments{
\item{data}{matrix for which we wish to estimate the independent segments of.}

\item{log_likelihood}{log likelihood estimation funciton, which will be
applied to all possible combinations of segments. Because it's executed
many times, it's likely to be the slow part of the function execution, so
it's advised that this function should have a performant, native
implementation. Defaults to a performant \code{multivariate} estimation.}

\item{penalty}{a function that determines the penalty for the segment. It's
called with the segment being analysed as it's only parameter.}

\item{allow_parallel}{allows parallel execution to take place using the
registered cluster. Defaults to TRUE.}
}
\description{
By assuming changepoints follow an hierarchical architecture, this architecture
manages to run faster by not searching all possible branches
}
\details{
Fast algorithm that segments data intoo changepoints, and it does so by
simplifying by reducing the search possibilities by assuming data split in an
hierarchical structure, i.e. a segment found in a first trial is assumed to
contain only segments independent of the rest of the data. This algorithm
usually runs very fast, but is known to yield less accurate results, possibly
not finding the exact changepoints that would maximize likelihood.
}
